<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.6.2">Jekyll</generator>
  
  
  <link href="http://localhost:4000/scalafastlane/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/scalafastlane/" rel="alternate" type="text/html" />
  <updated>2018-03-07T20:09:14+05:30</updated>
  <id>http://localhost:4000/scalafastlane//</id>

  
    <title type="html">Scala Fast Lane</title>
  

  
    <subtitle>A &quot;15 minute a day&quot; tutorial for Scala.</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">#6. Data Transformation as a Design Principle</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/03/07/data-transformations/" rel="alternate" type="text/html" title="#6. Data Transformation as a Design Principle" />
      <published>2018-03-07T19:18:05+05:30</published>
      <updated>2018-03-07T19:18:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/03/07/data-transformations</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/03/07/data-transformations/">&lt;p&gt;If I were asked to name the most important idea of Functional Programming, I would certainly say it is Data Transformation! I’m no expert in Category Theory but, I think it derives quite naturally from there - using functions to combine/convert one category to the other using algebra defined on them (I would really love some inputs here!)&lt;/p&gt;

&lt;p&gt;Category Theory aside, if you look at any imperative language that’s trying to mimic a functional way, the thing they start with are ways to do data transformations. We’ve already seen &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; comprehensions and, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; in earlier posts. In this post, let’s try to see if we can find some ways to spot if we are missing the mark and writing Scala in the Java way (anti-patterns)!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use of &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;: If your code is using &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, chances are that you are not using the full power of data transformations.&lt;/li&gt;
  &lt;li&gt;Shared state: This usually is a result of the first point. If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; declared at a global level in your code and there are functions that are manipulating this shared state, there is a problem that can be solved by transforming the data and passing it around in functions.&lt;/li&gt;
  &lt;li&gt;Functions with zero parameters: Yes, again in the same vein, this anti-pattern hints to the possible use of transforming data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is not an exhaustive list of course but, those are points that are easy to spot and correct.&lt;/p&gt;

&lt;p&gt;A neat trick to understand is that in functional programming, you don’t need to pass data around back and forth between different functions - that’s what the functions are for! Create small functions that work on a single piece of data and &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; them over a collection to get a different collection!&lt;/p&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Check out the &lt;a href=&quot;url:https://prasoonj.github.io/scalafastlane/2018/02/16/basic-map-and-fold/&quot;&gt;post on &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;&lt;/a&gt; and see if you feel more confident about that topic!&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; is basically &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; under the surface! Read up the &lt;a href=&quot;url:https://prasoonj.github.io/scalafastlane/2018/02/17/basic-conditions-looping-for-comprehensions/&quot;&gt;previous post&lt;/a&gt; on that topic and work out the exercises again to see if you are able to do them better!&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="data transformations" />
      
        <category term="functional programming" />
      

      
        <summary type="html">If I were asked to name the most important idea of Functional Programming, I would certainly say it is Data Transformation! I’m no expert in Category Theory but, I think it derives quite naturally from there - using functions to combine/convert one category to the other using algebra defined on them (I would really love some inputs here!)</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#5. Data modelling with Algebraic Data Types</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/03/06/modelling-with-algebraic-data-types/" rel="alternate" type="text/html" title="#5. Data modelling with Algebraic Data Types" />
      <published>2018-03-06T07:18:05+05:30</published>
      <updated>2018-03-06T07:18:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/03/06/modelling-with-algebraic-data-types</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/03/06/modelling-with-algebraic-data-types/">&lt;p&gt;Algebraic Data Types always seems like a complicated topic to those who are new to the functional world. So much so that, they avoid using it altogether! The perils of that approach is that the design of the code becomes largely OOPy making it hard to get the benefits of functional programming. In this post we’ll see how simple they really are and how to best use them. Let’s begin!&lt;/p&gt;

&lt;h1 id=&quot;sum-types-case-class&quot;&gt;Sum Types (&lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt;)&lt;/h1&gt;

&lt;p&gt;The “Sum Types” ADTs are used when we need to club things of different “shapes” together. In Scala we use case classes to do this. A good example is modelling the users of a website:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnonymousUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggedInUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(For now, think of &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; as another name for an interface. We’ll talk about it in detail in a later post.)
In the example above, wherever we want to talk about &lt;code class=&quot;highlighter-rouge&quot;&gt;Users&lt;/code&gt; in our code, we would be forced to talk about both the types of users - &lt;code class=&quot;highlighter-rouge&quot;&gt;AnonymousUser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggedInUser&lt;/code&gt;. These are called “sum types” because of the way they &lt;strong&gt;&lt;em&gt;combine&lt;/em&gt;&lt;/strong&gt; together to produce new things - How many types of users are there? 2!&lt;/p&gt;

&lt;p&gt;Another cool benefit of using &lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt; is that you get a constructor for free!&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggedInUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;43&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;awesomejohn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomVisitor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnonymousUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;asdfjiberishadsf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;product-types&quot;&gt;Product Types&lt;/h1&gt;

&lt;p&gt;The product types can be thought of as a traditional class from the OOP world. When we put a few types together, in one clutch, we get a product type. For example, in the example above, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggedInUser&lt;/code&gt; is a product type that holds 2 Strings together. When you read it like this it becomes clearer:
“&lt;code class=&quot;highlighter-rouge&quot;&gt;LoggedInUser&lt;/code&gt; is made up of a &lt;code class=&quot;highlighter-rouge&quot;&gt;userId: String&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;username: String&lt;/code&gt;”&lt;/p&gt;

&lt;h1 id=&quot;why-do-we-care&quot;&gt;Why do we care?&lt;/h1&gt;

&lt;p&gt;Well, the proof of the pudding is in data modelling. Product types should feel quite natural if you are coming from the OOP world. The sum types may take a bit of time to adjust to. A good way to think about the sum types is that you are just tagging &lt;strong&gt;absolutely different&lt;/strong&gt; things together so that they can be handled via similar logic. A function that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;Users&lt;/code&gt; would be able to take any of the 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;case classes&lt;/code&gt; we defined even though the 2 look (and indeed are!) very different.&lt;/p&gt;

&lt;p&gt;In that sense, the &lt;code class=&quot;highlighter-rouge&quot;&gt;trait Users&lt;/code&gt; is not just an &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; in the traditional sense (adding functionality), it is in fact, a way to tag the 2 different types so that things like &lt;strong&gt;Pattern Matching&lt;/strong&gt; become simpler (and possible). A golden rule of thumb in functional programming is to &lt;strong&gt;&lt;em&gt;say what things are&lt;/em&gt;&lt;/strong&gt;. That enables us to avoid things like poking inside an object to find a field &lt;code class=&quot;highlighter-rouge&quot;&gt;isAnonymous&lt;/code&gt; to handle a particular code path.&lt;/p&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Think of 5 different scenarios where totally different objects (based on their structures) need to be tagged together as &lt;code class=&quot;highlighter-rouge&quot;&gt;case classes&lt;/code&gt; with the same tag. (Sum type)&lt;/li&gt;
  &lt;li&gt;Think of product types that can be “built up” from other sum types.&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="data modelling" />
      
        <category term="ADT" />
      

      
        <summary type="html">Algebraic Data Types always seems like a complicated topic to those who are new to the functional world. So much so that, they avoid using it altogether! The perils of that approach is that the design of the code becomes largely OOPy making it hard to get the benefits of functional programming. In this post we’ll see how simple they really are and how to best use them. Let’s begin!</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#4. Conditions and looping vs comprehension</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/02/17/basic-conditions-looping-for-comprehensions/" rel="alternate" type="text/html" title="#4. Conditions and looping vs comprehension" />
      <published>2018-02-17T07:18:05+05:30</published>
      <updated>2018-02-17T07:18:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/02/17/basic-conditions-looping-for-comprehensions</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/02/17/basic-conditions-looping-for-comprehensions/">&lt;p&gt;We’ve already seen some looping in the earlier posts. Today, let’s talk about 3 concepts together that cement one important idea about a functional language that we’ve seen a glimpse of but, which we didn’t bother to define properly - &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We said that Scala has expressions meaning, constructs that, after doing their stuff, return a certain value. Compare that with statements like &lt;code class=&quot;highlighter-rouge&quot;&gt;if statements&lt;/code&gt; in other languages - they produce what are called &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt;. Programming is all about &lt;strong&gt;composing&lt;/strong&gt; smaller pieces together to form bigger ones. With that in mind, if a &lt;code class=&quot;highlighter-rouge&quot;&gt;statement&lt;/code&gt; that does not return anything is used, we can never be sure how including it as a compose-able piece will affect the overall behaviour of our code. Avoiding such statements hat produce &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt; is one of the major push that functional programming languages like Scala drive for. But, you do need these &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt;, if you just compose and do nothing, your program is useless! When we code in a FP language, we try to limit such side effects to controlled parts of our code and try to achieve “pureness” everywhere else.&lt;/p&gt;

&lt;p&gt;With that introduction, let’s see what the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; can do for us in Scala that it cannot in other languages like Java. Well, it can return something!&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;paste&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Entering paste mode (ctrl-D to finish)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsTheMorning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;Beautiful Morning!&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;Meh!&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Exiting paste mode, now interpreting.
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;howIsTheMorning&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;day:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsTheMorning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res12&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beautiful&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Morning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsTheMorning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res13&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsTheMorning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res14&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how you can use the Scala RePL to enter the paste mode when you need to write functions that span more than one line!
The important thing to note here is that your &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; blocks are not just doing stuff like printing values or calling databases or whatever, they are returning values that can be used to &lt;strong&gt;&lt;em&gt;compose&lt;/em&gt;&lt;/strong&gt; bigger blocks!
There’s certainly one problem here - &lt;strong&gt;&lt;em&gt;Saturday&lt;/em&gt;&lt;/strong&gt; morning are beautiful too! Let’s fix that while making it more robust!&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Thursday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sunday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tuesday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wednesday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thursday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Friday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Saturday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;paste&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Entering paste mode (ctrl-D to finish)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsEachDayOfTheWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;week&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$day is Beautiful!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Exiting paste mode, now interpreting.
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;howIsEachDayOfTheWeek&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;week:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;howIsEachDayOfTheWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sunday&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beautiful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Saturday&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beautiful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here, we’ve added, what are called &lt;strong&gt;&lt;em&gt;guards&lt;/em&gt;&lt;/strong&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; condition that &lt;strong&gt;guards&lt;/strong&gt; what gets filtered out and becomes available for the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;. We’ve learned quite a bit of terminology today, let’s add just one more to it before we finish - &lt;strong&gt;&lt;em&gt;for comprehension&lt;/em&gt;&lt;/strong&gt;.
A good way to remember when a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; construct results in a &lt;strong&gt;&lt;em&gt;comprehension&lt;/em&gt;&lt;/strong&gt; (as opposed to a &lt;strong&gt;&lt;em&gt;loop&lt;/em&gt;&lt;/strong&gt;) is to see what the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; does – &lt;strong&gt;&lt;em&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; results in a side-effect it is a loop, if it results in another collection, it is a comprehension&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phew!&lt;/strong&gt; This was a long one! Let’s do some quick exercises so we don’t forget what we learned!&lt;/p&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;howIsEachDayOfTheWeek&lt;/code&gt; function to print the better days of the week instead of yielding them. Hint: The function’s return type would be &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; in that case.&lt;/li&gt;
  &lt;li&gt;Play around with &lt;strong&gt;&lt;em&gt;guards&lt;/em&gt;&lt;/strong&gt;. Add more of them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; expression.&lt;/li&gt;
&lt;/ol&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="iteration" />
      

      
        <summary type="html">We’ve already seen some looping in the earlier posts. Today, let’s talk about 3 concepts together that cement one important idea about a functional language that we’ve seen a glimpse of but, which we didn’t bother to define properly - side effects.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#3. Map and Fold</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/02/16/basic-map-and-fold/" rel="alternate" type="text/html" title="#3. Map and Fold" />
      <published>2018-02-16T06:18:05+05:30</published>
      <updated>2018-02-16T06:18:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/02/16/basic-map-and-fold</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/02/16/basic-map-and-fold/">&lt;h2 id=&quot;running-down-a-collection-of-objects&quot;&gt;Running down a collection of objects&lt;/h2&gt;

&lt;p&gt;Before we start with map, let’s take a very quick detour and see how we can define functions (or methods inside a class which we’ll see in a later post):&lt;/p&gt;

&lt;h1 id=&quot;defining-functions&quot;&gt;Defining functions&lt;/h1&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, I kinda lied to you there. You need to &lt;code class=&quot;highlighter-rouge&quot;&gt;import math._&lt;/code&gt; before you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pow()&lt;/code&gt; method from the &lt;code class=&quot;highlighter-rouge&quot;&gt;math&lt;/code&gt; package. The &lt;code class=&quot;highlighter-rouge&quot;&gt;._&lt;/code&gt; instructs the compiler to get everything that’s publicly exposed available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;math&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Let’s run through that one line function and the function &lt;code class=&quot;highlighter-rouge&quot;&gt;type signature&lt;/code&gt; that follows it (the scala interpreter generates it for us). Here are the important points:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; is how you tell the compiler that it is the start of a function definition.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doSomething(x: Int)&lt;/code&gt; is the function name along with the list of arguments it takes and their types. The type of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; here.&lt;/li&gt;
  &lt;li&gt;The last part of the definition is the return type. You don’t always need to provide the return type but, it is a good practice (The compiler will tell you when you need to and you forgot but, don’t forget. It helps in writing clean code that NEVER breaks!) In this case, the return type is &lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The things after the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign constitute the body of the function. Yes, you guessed it, if the body is more than just one line, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt; to keep them in a code block.&lt;/li&gt;
  &lt;li&gt;Notice that there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement. The function would just return the result of the last line. Be careful that this should match the return type declared in your function definition.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;maps-are-more-than-just-for-cartographers&quot;&gt;Maps are more than just for cartographers!&lt;/h1&gt;

&lt;p&gt;Think of the &lt;code class=&quot;highlighter-rouge&quot;&gt;mapping&lt;/code&gt; operation as this: Run down a collection, taking one element at a time, and pass the elements as an argument to the mapping function.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;scala.collection.immutable.IndexedSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;32.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;243.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1024.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You would remember from yesterday that &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 to 4)&lt;/code&gt; is a collection. Well, if you forgot, just put it in the RePL and see what it is!&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;scala.collection.immutable.Range.Inclusive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Range&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Neat!&lt;/p&gt;

&lt;h1 id=&quot;lets-jump-to-fold-now&quot;&gt;Let’s jump to fold now!&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; is interesting! To demonstrate &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; let’s be nice and give a name to a collection:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By now, you should be comfortable with understanding the type that the RePL prints for us.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here’s what this weird looking fellow is doing:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; is taking 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;parameter lists&lt;/code&gt;! The first one is the number &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, the second is the function &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;. You might find the &lt;code class=&quot;highlighter-rouge&quot;&gt;_+_&lt;/code&gt; weird but, this is an &lt;code class=&quot;highlighter-rouge&quot;&gt;infix&lt;/code&gt; notation for the function &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; which takes 2 arguments. We don’t care to name the arguments here so we just used a &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; -&amp;gt; anything goes!&lt;/li&gt;
  &lt;li&gt;The first argument list - &lt;code class=&quot;highlighter-rouge&quot;&gt;(0)&lt;/code&gt; - is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt;. (See it yet?)&lt;/li&gt;
  &lt;li&gt;What &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; is doing is, it is taking one element of the collection at a time -&amp;gt; passing that element and the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt; to the function given in its second argument list. This function’s return value then acts as the &lt;code class=&quot;highlighter-rouge&quot;&gt;accumulator&lt;/code&gt; for the next iteration!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We “looped” through the whole list and added the elements!&lt;/p&gt;

&lt;h1 id=&quot;caution-or-joy&quot;&gt;Caution (or Joy?)&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt; will not go through the list in any particular order. It is essentially an async operation. If you are doing something with the list that requires a particular order to be preserved you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;foldLeft&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;foldRight&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This post is already quite long! But hey, we wrote just &lt;strong&gt;&lt;em&gt;4 lines of code!&lt;/em&gt;&lt;/strong&gt; That’s the joy of Scala, it makes your code very concise and therefore easy to debug, if something goes wrong!&lt;/p&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Try creating functions that are more than one lines of code!&lt;/li&gt;
  &lt;li&gt;Can you think of (and write!) some function that might give different results for &lt;code class=&quot;highlighter-rouge&quot;&gt;fold&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;foldLeft&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;foldRight&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;Change the return type of your functions to induce an error and read the exception.
  4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out this cool resource from &lt;a href=&quot;https://twitter.github.io/scala_school/collections.html&quot;&gt;Twitter&lt;/a&gt; for more on collections and what can be done with them!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="map" />
      
        <category term="fold" />
      

      
        <summary type="html">Running down a collection of objects</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#2. A Basic Iteration</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/02/15/basic-iteration/" rel="alternate" type="text/html" title="#2. A Basic Iteration" />
      <published>2018-02-15T12:18:05+05:30</published>
      <updated>2018-02-15T12:18:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/02/15/basic-iteration</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/02/15/basic-iteration/">&lt;h2 id=&quot;a-basic-iteration&quot;&gt;A Basic Iteration:&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala&amp;gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x &amp;lt;- &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 to 10&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; yield &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; x &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
res3: scala.collection.immutable.IndexedSeq[Int] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Vector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 4, 9, 16, 25, 36, 49, 64, 81, 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The part &lt;code class=&quot;highlighter-rouge&quot;&gt;(x &amp;lt;- (1 to 10))&lt;/code&gt; is called the generator. We are using a Range here &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 to 10)&lt;/code&gt; but, this could be any type that has &lt;code class=&quot;highlighter-rouge&quot;&gt;IterableLike&lt;/code&gt; as a trait (think of traits as an interface for now, we’ll come back to it.)&lt;/p&gt;

&lt;p&gt;The function (inside the curly braces &lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt; ) is a function that is passed after the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword. This function is responsible for taking each element of the generator and “doing something with it”. In this case we are just calculating squares of the numbers passed.&lt;/p&gt;

&lt;p&gt;Few important points about the result of the operation:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Since we did not assign the expression (everything in Scala is an expression - we don’t have statements here, you’ll know why later) to any variable (&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;), the interpreter assigns the result to a &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; (yes, by default things are &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; not &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;) called &lt;code class=&quot;highlighter-rouge&quot;&gt;res3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Following the same convention as before, you can check the type of res3 which is &lt;code class=&quot;highlighter-rouge&quot;&gt;scala.collection.immutable.IndexedSeq[Int]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We started with a Range (1 to 10), the for comprehension yielded another Sequence for us - a Vector. Each element of this vector is equal to the square of each element of the Range. Simple!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;exercises&quot;&gt;Exercises:&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Try assigning this expression to a val/var and compare the results.&lt;/li&gt;
  &lt;li&gt;Use a String object as a generator and see what happens.&lt;/li&gt;
  &lt;li&gt;Here’s how you can print things - &lt;code class=&quot;highlighter-rouge&quot;&gt;println(“Hello Scala”)&lt;/code&gt;. Try printing the values instead of returning a Vector.&lt;/li&gt;
  &lt;li&gt;Try the foreach construct like this:&lt;code class=&quot;highlighter-rouge&quot;&gt; (1 to 10) foreach { x =&amp;gt; x * x }&lt;/code&gt; Experiment with this slightly different syntax and try to see which one would be used where.&lt;/li&gt;
  &lt;li&gt;Use foreach for exercises 1 to 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://docs.scala-lang.org/overviews/repl/overview.html&quot;&gt;Scala Documentation&lt;/a&gt; for more on the RePL!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="iteration" />
      

      
        <summary type="html">A Basic Iteration:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#1. Explore the RePL</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/02/15/basic-repl-stuff/" rel="alternate" type="text/html" title="#1. Explore the RePL" />
      <published>2018-02-15T08:56:05+05:30</published>
      <updated>2018-02-15T08:56:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/02/15/basic-repl-stuff</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/02/15/basic-repl-stuff/">&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scala
scala&amp;gt; val x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
x: String &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; above is a &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;, meaning, if you try to assign any other value to &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, you would get an error. These are Scala’s immutable. We have assigned a String value to this val which is what the Scala interpreter prints out for you.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x: String //This is how we define objects to be of a certain type.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;exercises&quot;&gt;Exercises:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;See what happens if you try to re-assign a value to this val.&lt;/li&gt;
  &lt;li&gt;What happens if you don’t use the keyword ‘val’?&lt;/li&gt;
  &lt;li&gt;Carry out other type assignments - Int, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://docs.scala-lang.org/overviews/repl/overview.html&quot;&gt;Scala Documentation&lt;/a&gt; for more on the RePL!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="repl" />
      

      
        <summary type="html">$ scala scala&amp;gt; val x = &quot;hello&quot; x: String = hello The x above is a val, meaning, if you try to assign any other value to x, you would get an error. These are Scala’s immutable. We have assigned a String value to this val which is what the Scala interpreter prints out for you.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">#0. Installation Business</title>
      
      <link href="http://localhost:4000/scalafastlane/2018/02/15/installation/" rel="alternate" type="text/html" title="#0. Installation Business" />
      <published>2018-02-15T08:46:05+05:30</published>
      <updated>2018-02-15T08:46:05+05:30</updated>
      <id>http://localhost:4000/scalafastlane/2018/02/15/installation</id>
      <content type="html" xml:base="http://localhost:4000/scalafastlane/2018/02/15/installation/">&lt;p&gt;This would install the scala RePL and sbt (Scala’s build tool) on your machine.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install scala

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install sbt@1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://www.scala-lang.org/download/&quot;&gt;Scala Download&lt;/a&gt; if you face any problem!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="Basic" />
      

      
        <category term="scala" />
      
        <category term="installation" />
      

      
        <summary type="html">This would install the scala RePL and sbt (Scala’s build tool) on your machine.</summary>
      

      
      
    </entry>
  
  
</feed>
